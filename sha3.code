import "EMBED/unpack" as split

def pack64(field[64] bits) -> (field):
    field out = 0
    for field j in 0..64 do
        field i = 64 - (j + 1)
            out = out + bits[i] * (2 ** j)
        endfor
    return out

def unpack64(field value) -> (field[64]):
    field[254] b = split(value)
    return b[190..254]

def xor_uint64(field[64] a, field[64] b) -> (field[64]):
    field[64] result = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0]
    for field i in 0..64 do
        //result[i] = xor(a[i], b[i]) //parser error Parser should not generate Definition where the right hand side is a FunctionCall
        field x = a[i]
        field y = b[i]
        result[i] = x + y - 2 * x * y
    endfor
    return result

def not_uint64(field[64] a) -> (field[64]):
    field[64] result = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0]
    for field i in 0..64 do
        result[i] = 1 - a[i]
    endfor
    return result

def and_uint64(field[64] a, field[64] b) -> (field[64]):
    field[64] result = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0]
    for field i in 0..64 do
        result[i] = a[i]*b[i]
    endfor
    return result

def rol_uint64_0(field[64] bits) -> (field[64]):
     return [...bits[0..], ...bits[..0]]

def rol_uint64_1(field[64] bits) -> (field[64]):
     return [...bits[1..], ...bits[..1]]

def rol_uint64_2(field[64] bits) -> (field[64]):
     return [...bits[2..], ...bits[..2]]

def rol_uint64_3(field[64] bits) -> (field[64]):
     return [...bits[3..], ...bits[..3]]

def rol_uint64_6(field[64] bits) -> (field[64]):
     return [...bits[6..], ...bits[..6]]

def rol_uint64_8(field[64] bits) -> (field[64]):
     return [...bits[8..], ...bits[..8]]

def rol_uint64_10(field[64] bits) -> (field[64]):
     return [...bits[10..], ...bits[..10]]

def rol_uint64_14(field[64] bits) -> (field[64]):
     return [...bits[14..], ...bits[..14]]

def rol_uint64_15(field[64] bits) -> (field[64]):
     return [...bits[15..], ...bits[..15]]

def rol_uint64_18(field[64] bits) -> (field[64]):
     return [...bits[18..], ...bits[..18]]

def rol_uint64_20(field[64] bits) -> (field[64]):
     return [...bits[20..], ...bits[..20]]

def rol_uint64_21(field[64] bits) -> (field[64]):
     return [...bits[21..], ...bits[..21]]

def rol_uint64_25(field[64] bits) -> (field[64]):
     return [...bits[25..], ...bits[..25]]

def rol_uint64_27(field[64] bits) -> (field[64]):
     return [...bits[27..], ...bits[..27]]

def rol_uint64_28(field[64] bits) -> (field[64]):
     return [...bits[28..], ...bits[..28]]

def rol_uint64_36(field[64] bits) -> (field[64]):
     return [...bits[36..], ...bits[..36]]

def rol_uint64_39(field[64] bits) -> (field[64]):
     return [...bits[39..], ...bits[..39]]

def rol_uint64_41(field[64] bits) -> (field[64]):
     return [...bits[41..], ...bits[..41]]

def rol_uint64_43(field[64] bits) -> (field[64]):
     return [...bits[43..], ...bits[..43]]

def rol_uint64_44(field[64] bits) -> (field[64]):
     return [...bits[44..], ...bits[..44]]

def rol_uint64_45(field[64] bits) -> (field[64]):
     return [...bits[45..], ...bits[..45]]

def rol_uint64_55(field[64] bits) -> (field[64]):
     return [...bits[55..], ...bits[..55]]

def rol_uint64_56(field[64] bits) -> (field[64]):
     return [...bits[56..], ...bits[..56]]

def rol_uint64_61(field[64] bits) -> (field[64]):
     return [...bits[61..], ...bits[..61]]

def rol_uint64_62(field[64] bits) -> (field[64]):
     return [...bits[62..], ...bits[..62]]

def keccakf(field roundConstant, field[1600] state) -> (field[1600]):
    field[64] RCfixed = unpack64(roundConstant)
    field[64] A0_0 = state[0..64]
    field[64] A0_1 = state[64..128]
    field[64] A0_2 = state[128..192]
    field[64] A0_3 = state[192..256]
    field[64] A0_4 = state[256..320]
    field[64] A1_0 = state[320..384]
    field[64] A1_1 = state[384..448]
    field[64] A1_2 = state[448..512]
    field[64] A1_3 = state[512..576]
    field[64] A1_4 = state[576..640]
    field[64] A2_0 = state[640..704]
    field[64] A2_1 = state[704..768]
    field[64] A2_2 = state[768..832]
    field[64] A2_3 = state[832..896]
    field[64] A2_4 = state[896..960]
    field[64] A3_0 = state[960..1024]
    field[64] A3_1 = state[1024..1088]
    field[64] A3_2 = state[1088..1152]
    field[64] A3_3 = state[1152..1216]
    field[64] A3_4 = state[1216..1280]
    field[64] A4_0 = state[1280..1344]
    field[64] A4_1 = state[1344..1408]
    field[64] A4_2 = state[1408..1472]
    field[64] A4_3 = state[1472..1536]
    field[64] A4_4 = state[1536..1600]
    field[64] B0_0 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B0_1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B0_2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B0_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B0_4 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B1_0 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B1_1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B1_2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B1_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B1_4 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B2_0 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B2_1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B2_2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B2_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B2_4 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B3_0 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B3_1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B3_2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B3_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B3_4 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B4_0 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B4_1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B4_2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B4_3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] B4_4 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] C0 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] C1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] C2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] C3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] C4 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] D0 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] D1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] D2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] D3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    field[64] D4 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    //Theta step
    C0 = xor_uint64(xor_uint64(xor_uint64(A0_0, A0_1), xor_uint64(A0_2, A0_3)), A0_4)
    C1 = xor_uint64(xor_uint64(xor_uint64(A1_0, A1_1), xor_uint64(A1_2, A1_3)), A1_4)
    C2 = xor_uint64(xor_uint64(xor_uint64(A2_0, A2_1), xor_uint64(A2_2, A2_3)), A2_4)
    C3 = xor_uint64(xor_uint64(xor_uint64(A3_0, A3_1), xor_uint64(A3_2, A3_3)), A3_4)
    C4 = xor_uint64(xor_uint64(xor_uint64(A4_0, A4_1), xor_uint64(A4_2, A4_3)), A4_4)
    D0 = xor_uint64(C4, rol_uint64_1(C1))
    D1 = xor_uint64(C0, rol_uint64_1(C2))
    D2 = xor_uint64(C1, rol_uint64_1(C3))
    D3 = xor_uint64(C2, rol_uint64_1(C4))
    D4 = xor_uint64(C3, rol_uint64_1(C0))
    A0_0 = xor_uint64(A0_0, D0)
    A0_1 = xor_uint64(A0_1, D0)
    A0_2 = xor_uint64(A0_2, D0)
    A0_3 = xor_uint64(A0_3, D0)
    A0_4 = xor_uint64(A0_4, D0)
    A1_0 = xor_uint64(A1_0, D1)
    A1_1 = xor_uint64(A1_1, D1)
    A1_2 = xor_uint64(A1_2, D1)
    A1_3 = xor_uint64(A1_3, D1)
    A1_4 = xor_uint64(A1_4, D1)
    A2_0 = xor_uint64(A2_0, D2)
    A2_1 = xor_uint64(A2_1, D2)
    A2_2 = xor_uint64(A2_2, D2)
    A2_3 = xor_uint64(A2_3, D2)
    A2_4 = xor_uint64(A2_4, D2)
    A3_0 = xor_uint64(A3_0, D3)
    A3_1 = xor_uint64(A3_1, D3)
    A3_2 = xor_uint64(A3_2, D3)
    A3_3 = xor_uint64(A3_3, D3)
    A3_4 = xor_uint64(A3_4, D3)
    A4_0 = xor_uint64(A4_0, D4)
    A4_1 = xor_uint64(A4_1, D4)
    A4_2 = xor_uint64(A4_2, D4)
    A4_3 = xor_uint64(A4_3, D4)
    A4_4 = xor_uint64(A4_4, D4)
    //Rho and Pi steps
    B0_0 = A0_0
    B1_3 = rol_uint64_36(A0_1)
    B2_1 = rol_uint64_3(A0_2)
    B3_4 = rol_uint64_41(A0_3)
    B4_2 = rol_uint64_18(A0_4)
    B0_2 = rol_uint64_1(A1_0)
    B1_0 = rol_uint64_44(A1_1)
    B2_3 = rol_uint64_10(A1_2)
    B3_1 = rol_uint64_45(A1_3)
    B4_4 = rol_uint64_2(A1_4)
    B0_4 = rol_uint64_62(A2_0)
    B1_2 = rol_uint64_6(A2_1)
    B2_0 = rol_uint64_43(A2_2)
    B3_3 = rol_uint64_15(A2_3)
    B4_1 = rol_uint64_61(A2_4)
    B0_1 = rol_uint64_28(A3_0)
    B1_4 = rol_uint64_55(A3_1)
    B2_2 = rol_uint64_25(A3_2)
    B3_0 = rol_uint64_21(A3_3)
    B4_3 = rol_uint64_56(A3_4)
    B0_3 = rol_uint64_27(A4_0)
    B1_1 = rol_uint64_20(A4_1)
    B2_4 = rol_uint64_39(A4_2)
    B3_2 = rol_uint64_8(A4_3)
    B4_0 = rol_uint64_14(A4_4)
    //Chi step
    A0_0 = xor_uint64(B0_0, and_uint64(not_uint64(B1_0), B2_0))
    A0_1 = xor_uint64(B0_1, and_uint64(not_uint64(B1_1), B2_1))
    A0_2 = xor_uint64(B0_2, and_uint64(not_uint64(B1_2), B2_2))
    A0_3 = xor_uint64(B0_3, and_uint64(not_uint64(B1_3), B2_3))
    A0_4 = xor_uint64(B0_4, and_uint64(not_uint64(B1_4), B2_4))
    A1_0 = xor_uint64(B1_0, and_uint64(not_uint64(B2_0), B3_0))
    A1_1 = xor_uint64(B1_1, and_uint64(not_uint64(B2_1), B3_1))
    A1_2 = xor_uint64(B1_2, and_uint64(not_uint64(B2_2), B3_2))
    A1_3 = xor_uint64(B1_3, and_uint64(not_uint64(B2_3), B3_3))
    A1_4 = xor_uint64(B1_4, and_uint64(not_uint64(B2_4), B3_4))
    A2_0 = xor_uint64(B2_0, and_uint64(not_uint64(B3_0), B4_0))
    A2_1 = xor_uint64(B2_1, and_uint64(not_uint64(B3_1), B4_1))
    A2_2 = xor_uint64(B2_2, and_uint64(not_uint64(B3_2), B4_2))
    A2_3 = xor_uint64(B2_3, and_uint64(not_uint64(B3_3), B4_3))
    A2_4 = xor_uint64(B2_4, and_uint64(not_uint64(B3_4), B4_4))
    A3_0 = xor_uint64(B3_0, and_uint64(not_uint64(B4_0), B0_0))
    A3_1 = xor_uint64(B3_1, and_uint64(not_uint64(B4_1), B0_1))
    A3_2 = xor_uint64(B3_2, and_uint64(not_uint64(B4_2), B0_2))
    A3_3 = xor_uint64(B3_3, and_uint64(not_uint64(B4_3), B0_3))
    A3_4 = xor_uint64(B3_4, and_uint64(not_uint64(B4_4), B0_4))
    A4_0 = xor_uint64(B4_0, and_uint64(not_uint64(B0_0), B1_0))
    A4_1 = xor_uint64(B4_1, and_uint64(not_uint64(B0_1), B1_1))
    A4_2 = xor_uint64(B4_2, and_uint64(not_uint64(B0_2), B1_2))
    A4_3 = xor_uint64(B4_3, and_uint64(not_uint64(B0_3), B1_3))
    A4_4 = xor_uint64(B4_4, and_uint64(not_uint64(B0_4), B1_4))
    //Iota step
    A0_0 = xor_uint64(A0_0, RCfixed)
    return [...A0_0, ...A0_1, ...A0_2, ...A0_3, ...A0_4, ...A1_0, ...A1_1, ...A1_2, ...A1_3, ...A1_4, ...A2_0, ...A2_1, ...A2_2, ...A2_3, ...A2_4, ...A3_0, ...A3_1, ...A3_2, ...A3_3, ...A3_4, ...A4_0, ...A4_1, ...A4_2, ...A4_3, ...A4_4]

def main(field roundConstant, field[1600] state) -> (field[1600]):
    return keccakf(roundConstant, state)