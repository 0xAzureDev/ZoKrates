//Python code used to create test vector:
// import bitstring
// from zokrates_pycrypto.gadgets.pedersenHasher import PedersenHasher
// import numpy as np
//
// entropy = np.random.bytes(64)
// print(entropy)
// # b'\x17\xd2\xe6\xd9\\t\xe9|K\xf6\x0c\xc0\xc6\xa6\xb4\x17\xba\xfcT\xe9 \\\x80\x80&\x1fBD\x964\xd6\xdf\x8e\x7f^\x06j)n\xcf\x1d\xc1\x83\x8cy\x1c\x8fZ\xee\x9e\xca3!\x00\xf1\x89\xc9k\x02\x88\xc6\xb1P\x1f'
// hasher = PedersenHasher("test")
// digest = hasher.hash_bytes(entropy)
//
// entropy_bits = bitstring.BitArray(bytes=entropy).bin
// digest_bits = bitstring.BitArray(bytes=digest.compress()).bin

import "hashes/pedersen/512bit" as pedersen

def main() -> (field):
	
	bool[512] e = [false, false, false, true, false, true, true, true, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true]

	field[256] d = pedersen(e)

	d == [False, False, False, False, False, True, True, False, True, True, False, True, True, True, True, True, True, False, True, False, True, True, False, False, True, False, True, False, False, False, False, False, True, True, False, True, True, False, False, False, False, False, True, False, True, True, False, False, False, False, False, False, False, True, True, True, True, False, True, False, True, True, True, False, False, False, True, True, False, False, True, True, False, True, True, True, True, False, False, False, False, True, True, True, True, False, True, True, False, False, True, False, True, True, True, True, False, True, True, False, False, True, True, False, False, True, False, True, False, False, True, True, False, False, False, True, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, True, True, True, True, True, False, True, True, True, True, False, False, False, True, False, False, True, True, True, True, True, False, False, False, True, False, True, True, False, True, False, False, False, True, False, False, True, False, False, True, False, False, False, False, True, True, False, False, False, True, False, False, True, False, False, True, False, False, True, True, False, False, False, True, False, True, False, False, True, True, True, True, True, False, False, False, True, False, True, False, False, True, True, False, True, False, True, True, True, False, False, False, False, False, False, True, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, True, False, True, True]
	
	return 1